CURSO DE DJANGO CON PYTHON

SESION 7
1. instalacion de python (descargarlo de org)
2. instalacion de Django PIP herramienta para crear entornos
3. Creacio de entorno prueba con el comando #python -m venv nombreentorno
4. Activar el entorno de desarrollo
	a. entrando a la carpeta scripts de la anterior instalacion
		ejecutamos el archivo activate. 
		Simplemente desde el cmd 
5. Descargar el Django con pip #pip install django
	Siempre con el entorno activado
	Y para cualquier isntalacion de paquete es #pip install nombre
6. Verificacion de paquetes
	con el entorno activo y estando en la carpeta general 
	digitamos #pip freeze --local Este nos desplega lo que 
	tenemos instalado en nuestro proyecto.
	
SESION 8 CREAR PROYECTO  WEB CON DJANGO
1. RECORDAR SIEMPRE ACTIVAR EL ENTORNO DE DESARROLLO
2. para crear un proyecto es:
	Esrtando en la carpeta donde queremos alojar el proyecto 
	digitamos en consola #django-admin startproject nombreproyecto.
3. Verficar si está bien creado el proyecto. Es decir vamos a ver si
	subio en linea el proyecto, estando en la carpeta del proyecto
	digitamos en consola: #python manage.py runserver
	Esto sube el servidor en un servidor local copia la direccion en el 
	navegador y lo revisas

SESION 9 CREACION DEL PRIMER PROYECTO EMPLEADOS

1 Creamos de la misma manera anterior.
	a. crear un entorno virtual llamado empleados
		#python -m venv empleados
	b. instalamos django
		#pip install django
	c. crear el proyecto 
		#django-admin startproject empleado
	d. editor de texto VScode
	
CLASE 10 ARCHIVOS DE UN PROYECTO Django
	
	RECORDAR ACTIVAR EL ENTORNO DEL PROYECTO
	
	a) manage.py = es el principal del proyecto django se encarga de llamar todo lo que 
	se haya implementado en el proyecto. 
	b) settings.py = dentro de todo el se configura todo lo que se necesite para correr
	c) urls.py = llamado al codigo del codigo escrito, porque un priyecto django funciona con
		url
	d) db.sqllite.py = por defecto para las bases de datos cuando no se ha configurado ninguna
	e) _init_.py = hace que se lea todo el codigo de python
	

SESION 11 ARCHIVO URL.py DE DJANGO
	Cuando ingresamos una urlk en el navegador el proyecto busca en urls la referencia que se busca
	una evz encontrado ejectura lo siguiente despues de la coma segun se le haya indicado hacer 
	en esa url.
	
	Se realiza prueba que hacemos para url, agregando una. prueba satisfactoria. Queda Ok
	PARA TENER EN CUENTA:
		- EN LAS URL SON MUICHAS YA QUE CADA VENTANA GENERA CADA VENTANA
		  ES MEJOR QUE EL ARCHIVO PRINCIPAL

SESION 12 Actualizacion por cambio de versión del idioma.

SESION 13 CONFIGURACION/ORGANIZACION DE ARCHIVO SETTING.py

	- Es un archivo que va creciendo a medida que se va desarrollando. 
	- Cada entorno de prueba/testing/ususario/ entorno local etc el archivo va cambiando
		Entonces se debe configurar el archivo para evitar la reconfiguracion de este archivo en 
		los distintos entornos de trabajo. 
		
		a. Creamos una carpeta a nivel del archivo setting.py
		b. Creamos 3 archivos base.py / local.py / prod.py
		c. RECORDAR INCLUIR __init__py, le decimos django que ahi dentro de la carpeta
		hay codigo que debe tener en cuenta
		c. Local: ayduara a usar el proyecto en local.
		python manage.py runserver --settings=empleado.settings.local

SESION 14 QUE SON APLICACIONES EN DJANGO

	desarrollo agil SCRUM,KANBAM,XP
	EN pocas lineas de codigo se obtiene un codigo funcional 
	EN DJANGO SOLCAMENTE PARA CUBRIR UNA NECESIDAD ES DECIR PARA 
	DESPUES INTEGRAR LAS DIFERENTES SOLUCIONES.
	
	VAMOS HACER EL REGISTRO DE EMPLEADOS DE UNA EMPRESA
	ADMINISTRACION DE EMPLEADOS A NIVEL GENERAL.
	
	HACERLO:
	1. SE DEFINE EL DISEÑO (FUNCIONALIDAD) DE BOTONES PESTAÑAS ETC
	2. CREACION DE LA BASE DE DATOS NECESARIA, PARA ESTE CASO SOLO 
		NECESITAMOS DOS TABLAS ASI:
		-	DEPARATAMENTO
			name
			shor_name
		- 	EMPLEADOS
			first_name
			last_name
			job
			departamento (relacion)
			-image
	2. Determinar las app de Django 
		- una app para departamento
		- una app para Empleados

SESION 15 CREACION DE UNA APP 
	 
	 TENER ACTIVO EL ENTORNO (SIEMPRE)
	 
	 1. Crear iuna carpeta llamada aplications a nivel de manage.py
	 2. Estando en aplications ejecutamos el comando django-admin startapp nombreapp
	 3. Creamos dos app departamento y personas
	 
	 Se crean dos carpetas diferentes con archivos cada unoa tiene un archivo llamado
	 migration y ahi es donde se va a guardar los cambios que vaya teniendo nuestra app.
	 
	 
	 ACTUALIZACION !!! al agregar aplicaciones en un proyecto Django.
	 
IMPORTANTE!!!!
Hola, antes de pasar a la siguiente clase por favor ten en cuenta esta pequeña actualización.

Desde la versión 3.2 de Django cambiaron algunas cosas respecto a las aplicaciones y en especifico respecto 
al archivo apps.py que se genera al crear una aplicación. 

Sin no toman en cuenta lo que mencionaré más adelante tendrán problemas al agregar una aplicación local 
al proyecto.

Desde el minuto 1.20 de la siguiente clase, mostramos como agregamos una app local a un proyecto, luego de 
que agreguen la ruta de su aplicación a la variable que contiene aplicaciones de django INSTALLED_APPS = [] 
También debemos hacer un paso más.

Nos dirigimos a la aplicación creada y vamos al archivo apps.py dentro encontraremos un código como este:

from django.apps import AppConfig
  
class DepartamentoConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'departamento'

aquí, en la variable name, debemos cambiar por la ruta de nuestra aplicación, 
para el ejemplo quedaría de esta forma:

class DepartamentoConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'applications.departamento'


Este proceso hay que hacerlo para todas las apps que agreguemos a partir de ahora.
 Con ello ya no tendrán problemas al agregar una app.
 
 DECLARAR URLS CON RE_PATH
Como ultimo cambio, también si revisamos el minuto 9:30 de la siguiente clase, 
usamos una función llamada re_path para declarar urls dentro de urls, pero esto ya 
no es necesario desde la versión 3.2, puedes solamente usar la función path, que es 
la que trae ya django por defecto.

SESION 17 INSTALAR UNA APP EN DJANGO

	DEBEMOS DECIRLE A DJANGO QUE TENGA EN CUENTA LAS DOS APP INCIADAS
	cada uno de nuestras carpetas tendra nuestra carpeta url para que nquede mas 
	ordenadas que le correspondan.
	
	entonces en urls.py de departamento agregamos 
	
	from django.contrib import admin
from django.urls import path

def DesdeApp(self):
    print('===================estamos probando URLS.py desde la app deparatamento')

urlpatterns = [
    path('departamento/', DesdeApp),
]

	Y LE HACEMOS REFERENCIA DESDE URLS.PY que es el principal 
	 de la siguiente manera.
	 
	 urlpatterns = [
    path('admin/', admin.site.urls),
    #incluimos url de app departamento
    path ('',include ('aplications.departamento.urls')),
]
	Corremos el navegador y verfiucamos que haya ejecutado lka funcion.
	}
	
SESION 18. PATRO DE DISEÑO, VISTAS TEMPLATE

	POR QUE LAS APP TRAE LA ESTRUCTURA QUE TRAE? DJANGO EN WEB
		
	PATRONES DE DISEÑO: Son estandares para que el codigo esté mas ordenado y abierto a mejorar
	TIPOS DE PROGRAMACION:
	-Programacion en capa:
		base de datos, logica de negocio, presentacion
	-En la web se llama modelo vista controlador (MVC)
		MODELOO ES BASE DE DATOS
		VISTA ES PANTALLA INTERFAZ
		CONTROLADOR ES LA LOGICA DEL NEGOCIO
		
	EN DJANGO ES:
	MDT MODELO VISTA TEMPLATE
	MODELO ES BD
	VISTA ES LOGICA NEGOCIO Y PREPARACION DE DATOS
	TEMPLATE ES EL QUE MUESTRE EN PANTALLA. ESCRIBIENDO SOLO HTML

SESION 19 VISTAS BASADAS EN CLASES
	
	TRABAJAMOS EN MVT
	1. CON EL ENTORNO ACTIVADO 
	2. CREAR UNA NUEVA APP LLAMADA home
		recordemos estando en la carpeta aplications con el comando
		#django-admin startapp home
	VEREMOS PRIMERO COMO TRABAJA LA CAPA VISTA TEMPLETE